"use strict";(self.webpackChunkpygeoweaver=self.webpackChunkpygeoweaver||[]).push([[8143],{3905:(e,t,r)=>{r.d(t,{Zo:()=>f,kt:()=>d});var o=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,o)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,o,n=function(e,t){if(null==e)return{};var r,o,n={},i=Object.keys(e);for(o=0;o<i.length;o++)r=i[o],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)r=i[o],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var s=o.createContext({}),p=function(e){var t=o.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},f=function(e){var t=p(e.components);return o.createElement(s.Provider,{value:t},e.children)},u="mdxType",w={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},c=o.forwardRef((function(e,t){var r=e.components,n=e.mdxType,i=e.originalType,s=e.parentName,f=l(e,["components","mdxType","originalType","parentName"]),u=p(r),c=n,d=u["".concat(s,".").concat(c)]||u[c]||w[c]||i;return r?o.createElement(d,a(a({ref:t},f),{},{components:r})):o.createElement(d,a({ref:t},f))}));function d(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=r.length,a=new Array(i);a[0]=c;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:n,a[1]=l;for(var p=2;p<i;p++)a[p]=r[p];return o.createElement.apply(null,a)}return o.createElement.apply(null,r)}c.displayName="MDXCreateElement"},1773:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>w,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var o=r(7462),n=(r(7294),r(3905));const i={title:"run_workflow"},a=void 0,l={unversionedId:"api-ref/run-workflow",id:"version-0.6.19/api-ref/run-workflow",title:"run_workflow",description:"runworkflow(*, workflowid str = None, workflowzipfilepath str = None, hostlist str = None, sync_path: PathLike = None)",source:"@site/versioned_docs/version-0.6.19/api-ref/run-workflow.md",sourceDirName:"api-ref",slug:"/api-ref/run-workflow",permalink:"/pygeoweaver-docs.github.io/docs/api-ref/run-workflow",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/versioned_docs/version-0.6.19/api-ref/run-workflow.md",tags:[],version:"0.6.19",frontMatter:{title:"run_workflow"},sidebar:"documentationSidebar",previous:{title:"run_process",permalink:"/pygeoweaver-docs.github.io/docs/api-ref/run-process"},next:{title:"show_history",permalink:"/pygeoweaver-docs.github.io/docs/api-ref/show-history"}},s={},p=[{value:"<code>run_workflow(*, workflow_id: str, workflow_folder_path: str = None, workflow_zip_file_path: str = None, environment_list: str = None, host_list: str = None, password_list: str = None, sync_path: PathLike = None)</code>",id:"run_workflow-workflow_id-str-workflow_folder_path-str--none-workflow_zip_file_path-str--none-environment_list-str--none-host_list-str--none-password_list-str--none-sync_path-pathlike--none",level:4}],f={toc:p},u="wrapper";function w(e){let{components:t,...r}=e;return(0,n.kt)(u,(0,o.Z)({},f,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h4",{id:"run_workflow-workflow_id-str-workflow_folder_path-str--none-workflow_zip_file_path-str--none-environment_list-str--none-host_list-str--none-password_list-str--none-sync_path-pathlike--none"},(0,n.kt)("inlineCode",{parentName:"h4"},"run_workflow(*, workflow_id: str, workflow_folder_path: str = None, workflow_zip_file_path: str = None, environment_list: str = None, host_list: str = None, password_list: str = None, sync_path: PathLike = None)")),(0,n.kt)("p",null,"Function to run a GeoWeaver workflow."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Parameters:")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"workflow_id")," (str): The ID of the workflow to run."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"workflow_folder_path")," (str, optional): The folder path of the workflow."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"workflow_zip_file_path")," (str, optional): The path to the workflow zip file."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"environment_list")," (str, optional): The list of environments to run on, separated by commas."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"host_list")," (str, optional): The list of hosts to run on, separated by commas."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"password_list")," (str, optional): The list of passwords for the target hosts, separated by commas."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"sync_path")," (PathLike, optional): The path to the file to sync with the workflow code.")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Raises:")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"RuntimeError"),": If the password list length doesn't match the host list."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"RuntimeError"),": If at least one of the three options (workflow ID, folder path, or zip path) is not provided.")))}w.isMDXComponent=!0}}]);