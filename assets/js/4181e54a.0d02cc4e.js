"use strict";(self.webpackChunkpygeoweaver=self.webpackChunkpygeoweaver||[]).push([[9334],{3905:(e,t,r)=>{r.d(t,{Zo:()=>l,kt:()=>g});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var p=n.createContext({}),i=function(e){var t=n.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},l=function(e){var t=i(e.components);return n.createElement(p.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},f=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,p=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),u=i(r),f=o,g=u["".concat(p,".").concat(f)]||u[f]||m[f]||a;return r?n.createElement(g,s(s({ref:t},l),{},{components:r})):n.createElement(g,s({ref:t},l))}));function g(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,s=new Array(a);s[0]=f;var c={};for(var p in t)hasOwnProperty.call(t,p)&&(c[p]=t[p]);c.originalType=e,c[u]="string"==typeof e?e:o,s[1]=c;for(var i=2;i<a;i++)s[i]=r[i];return n.createElement.apply(null,s)}return n.createElement.apply(null,r)}f.displayName="MDXCreateElement"},9683:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>p,contentTitle:()=>s,default:()=>m,frontMatter:()=>a,metadata:()=>c,toc:()=>i});var n=r(7462),o=(r(7294),r(3905));const a={title:"gw.get_process_by_name"},s=void 0,c={unversionedId:"api-ref/get-process-by-name",id:"api-ref/get-process-by-name",title:"gw.get_process_by_name",description:"getprocessbyname(processname)",source:"@site/docs/api-ref/get-process-by-name.md",sourceDirName:"api-ref",slug:"/api-ref/get-process-by-name",permalink:"/pygeoweaver-docs.github.io/docs/api-ref/get-process-by-name",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/api-ref/get-process-by-name.md",tags:[],version:"current",frontMatter:{title:"gw.get_process_by_name"},sidebar:"documentationSidebar",previous:{title:"gw.get_process_by_language",permalink:"/pygeoweaver-docs.github.io/docs/api-ref/get-process-by-language"},next:{title:"gw.get_process_history",permalink:"/pygeoweaver-docs.github.io/docs/api-ref/get-process-history"}},p={},i=[{value:"<code>get_process_by_name(process_name)</code>",id:"get_process_by_nameprocess_name",level:4}],l={toc:i},u="wrapper";function m(e){let{components:t,...r}=e;return(0,o.kt)(u,(0,n.Z)({},l,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h4",{id:"get_process_by_nameprocess_name"},(0,o.kt)("inlineCode",{parentName:"h4"},"get_process_by_name(process_name)")),(0,o.kt)("p",null,"Function to retrieve processes by name from GeoWeaver."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Parameters:")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"process_name")," (str): The name of the process to search for.")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Notes:")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"This function sends a POST request to the GeoWeaver API to retrieve the list of processes."),(0,o.kt)("li",{parentName:"ul"},"It filters the processes by matching the ",(0,o.kt)("inlineCode",{parentName:"li"},"process_name")," parameter."),(0,o.kt)("li",{parentName:"ul"},"The function displays the matching processes in a pandas DataFrame with all columns visible.")))}m.isMDXComponent=!0}}]);