"use strict";(self.webpackChunkpygeoweaver=self.webpackChunkpygeoweaver||[]).push([[9071],{3905:(e,t,r)=>{r.d(t,{Zo:()=>l,kt:()=>y});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var p=n.createContext({}),c=function(e){var t=n.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},l=function(e){var t=c(e.components);return n.createElement(p.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},f=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,i=e.originalType,p=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),u=c(r),f=o,y=u["".concat(p,".").concat(f)]||u[f]||d[f]||i;return r?n.createElement(y,a(a({ref:t},l),{},{components:r})):n.createElement(y,a({ref:t},l))}));function y(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=r.length,a=new Array(i);a[0]=f;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s[u]="string"==typeof e?e:o,a[1]=s;for(var c=2;c<i;c++)a[c]=r[c];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}f.displayName="MDXCreateElement"},5496:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>p,contentTitle:()=>a,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var n=r(7462),o=(r(7294),r(3905));const i={title:"get_process_by_id"},a=void 0,s={unversionedId:"api-ref/get-process-by-id",id:"api-ref/get-process-by-id",title:"get_process_by_id",description:"getprocessbyid(processid)",source:"@site/docs/api-ref/get-process-by-id.md",sourceDirName:"api-ref",slug:"/api-ref/get-process-by-id",permalink:"/pygeoweaver-docs.github.io/docs/api-ref/get-process-by-id",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/api-ref/get-process-by-id.md",tags:[],version:"current",frontMatter:{title:"get_process_by_id"},sidebar:"documentationSidebar",previous:{title:"export_workflow",permalink:"/pygeoweaver-docs.github.io/docs/api-ref/export-workflow"},next:{title:"get_process_by_language",permalink:"/pygeoweaver-docs.github.io/docs/api-ref/get-process-by-language"}},p={},c=[{value:"<code>get_process_by_id(process_id)</code>",id:"get_process_by_idprocess_id",level:4}],l={toc:c},u="wrapper";function d(e){let{components:t,...r}=e;return(0,o.kt)(u,(0,n.Z)({},l,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h4",{id:"get_process_by_idprocess_id"},(0,o.kt)("inlineCode",{parentName:"h4"},"get_process_by_id(process_id)")),(0,o.kt)("p",null,"Function to retrieve a process by its ID from GeoWeaver."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Parameters:")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"process_id")," (str): The ID of the process to retrieve.")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Notes:")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"This function sends a POST request to the GeoWeaver API to retrieve the list of processes."),(0,o.kt)("li",{parentName:"ul"},"It filters the processes by matching the ",(0,o.kt)("inlineCode",{parentName:"li"},"process_id")," parameter."),(0,o.kt)("li",{parentName:"ul"},"The function displays the matching process in a pandas DataFrame with all columns visible.")))}d.isMDXComponent=!0}}]);