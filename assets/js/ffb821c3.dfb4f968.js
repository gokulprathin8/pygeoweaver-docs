"use strict";(self.webpackChunkpygeoweaver=self.webpackChunkpygeoweaver||[]).push([[399],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>d});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var a=n.createContext({}),p=function(e){var t=n.useContext(a),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},c=function(e){var t=p(e.components);return n.createElement(a.Provider,{value:t},e.children)},u="mdxType",f={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},w=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,i=e.originalType,a=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=p(r),w=o,d=u["".concat(a,".").concat(w)]||u[w]||f[w]||i;return r?n.createElement(d,l(l({ref:t},c),{},{components:r})):n.createElement(d,l({ref:t},c))}));function d(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=r.length,l=new Array(i);l[0]=w;var s={};for(var a in t)hasOwnProperty.call(t,a)&&(s[a]=t[a]);s.originalType=e,s[u]="string"==typeof e?e:o,l[1]=s;for(var p=2;p<i;p++)l[p]=r[p];return n.createElement.apply(null,l)}return n.createElement.apply(null,r)}w.displayName="MDXCreateElement"},3461:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>a,contentTitle:()=>l,default:()=>f,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var n=r(7462),o=(r(7294),r(3905));const i={title:"list_processes_in_workflow"},l=void 0,s={unversionedId:"api-ref/list-processes-in-workflow",id:"api-ref/list-processes-in-workflow",title:"list_processes_in_workflow",description:"listprocessesinworkflow(workflowid)",source:"@site/docs/api-ref/list-processes-in-workflow.md",sourceDirName:"api-ref",slug:"/api-ref/list-processes-in-workflow",permalink:"/pygeoweaver-docs.github.io/docs/next/api-ref/list-processes-in-workflow",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/api-ref/list-processes-in-workflow.md",tags:[],version:"current",frontMatter:{title:"list_processes_in_workflow"},sidebar:"documentationSidebar",previous:{title:"list_hosts",permalink:"/pygeoweaver-docs.github.io/docs/next/api-ref/list-hosts"},next:{title:"list_processes",permalink:"/pygeoweaver-docs.github.io/docs/next/api-ref/list-processes"}},a={},p=[{value:"<code>list_processes_in_workflow(workflow_id)</code>",id:"list_processes_in_workflowworkflow_id",level:4}],c={toc:p},u="wrapper";function f(e){let{components:t,...r}=e;return(0,o.kt)(u,(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h4",{id:"list_processes_in_workflowworkflow_id"},(0,o.kt)("inlineCode",{parentName:"h4"},"list_processes_in_workflow(workflow_id)")),(0,o.kt)("p",null,"Function to list all processes in a specified workflow."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Args:")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"workflow_id")," (str): The ID of the workflow.")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Returns:")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"If executed in an IPython environment:",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"result")," (pandas.DataFrame): A DataFrame containing the process titles and IDs in the workflow."))),(0,o.kt)("li",{parentName:"ul"},"If executed in a non-IPython environment:",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"result")," (list): A list of dictionaries containing the process titles and IDs in the workflow.")))),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Raises:")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"Exception"),": If the GeoWeaver JAR file is not found or if the workflow details cannot be retrieved.")))}f.isMDXComponent=!0}}]);